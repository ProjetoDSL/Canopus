/**
 */
package openmlperf.openmlperfPerformanceScenario.openmlperfPerformanceScripting.provider;

import java.util.ArrayList;
import java.util.Collection;

import openmlperf.openmlperfPerformanceScenario.openmlperfPerformanceScripting.util.OpenmlperfPerformanceScriptingAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class OpenmlperfPerformanceScriptingItemProviderAdapterFactory extends OpenmlperfPerformanceScriptingAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public OpenmlperfPerformanceScriptingItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link openmlperf.openmlperfPerformanceScenario.openmlperfPerformanceScripting.Initial} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InitialItemProvider initialItemProvider;

	/**
	 * This creates an adapter for a {@link openmlperf.openmlperfPerformanceScenario.openmlperfPerformanceScripting.Initial}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInitialAdapter() {
		if (initialItemProvider == null) {
			initialItemProvider = new InitialItemProvider(this);
		}

		return initialItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link openmlperf.openmlperfPerformanceScenario.openmlperfPerformanceScripting.Final} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FinalItemProvider finalItemProvider;

	/**
	 * This creates an adapter for a {@link openmlperf.openmlperfPerformanceScenario.openmlperfPerformanceScripting.Final}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFinalAdapter() {
		if (finalItemProvider == null) {
			finalItemProvider = new FinalItemProvider(this);
		}

		return finalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link openmlperf.openmlperfPerformanceScenario.openmlperfPerformanceScripting.Activity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityItemProvider activityItemProvider;

	/**
	 * This creates an adapter for a {@link openmlperf.openmlperfPerformanceScenario.openmlperfPerformanceScripting.Activity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityAdapter() {
		if (activityItemProvider == null) {
			activityItemProvider = new ActivityItemProvider(this);
		}

		return activityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link openmlperf.openmlperfPerformanceScenario.openmlperfPerformanceScripting.ThinkTime} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ThinkTimeItemProvider thinkTimeItemProvider;

	/**
	 * This creates an adapter for a {@link openmlperf.openmlperfPerformanceScenario.openmlperfPerformanceScripting.ThinkTime}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createThinkTimeAdapter() {
		if (thinkTimeItemProvider == null) {
			thinkTimeItemProvider = new ThinkTimeItemProvider(this);
		}

		return thinkTimeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link openmlperf.openmlperfPerformanceScenario.openmlperfPerformanceScripting.SaveParameters} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SaveParametersItemProvider saveParametersItemProvider;

	/**
	 * This creates an adapter for a {@link openmlperf.openmlperfPerformanceScenario.openmlperfPerformanceScripting.SaveParameters}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSaveParametersAdapter() {
		if (saveParametersItemProvider == null) {
			saveParametersItemProvider = new SaveParametersItemProvider(this);
		}

		return saveParametersItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link openmlperf.openmlperfPerformanceScenario.openmlperfPerformanceScripting.DataTable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataTableItemProvider dataTableItemProvider;

	/**
	 * This creates an adapter for a {@link openmlperf.openmlperfPerformanceScenario.openmlperfPerformanceScripting.DataTable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataTableAdapter() {
		if (dataTableItemProvider == null) {
			dataTableItemProvider = new DataTableItemProvider(this);
		}

		return dataTableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link openmlperf.openmlperfPerformanceScenario.openmlperfPerformanceScripting.ParameterObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterObjectItemProvider parameterObjectItemProvider;

	/**
	 * This creates an adapter for a {@link openmlperf.openmlperfPerformanceScenario.openmlperfPerformanceScripting.ParameterObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterObjectAdapter() {
		if (parameterObjectItemProvider == null) {
			parameterObjectItemProvider = new ParameterObjectItemProvider(this);
		}

		return parameterObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link openmlperf.openmlperfPerformanceScenario.openmlperfPerformanceScripting.ColumnsObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColumnsObjectItemProvider columnsObjectItemProvider;

	/**
	 * This creates an adapter for a {@link openmlperf.openmlperfPerformanceScenario.openmlperfPerformanceScripting.ColumnsObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColumnsObjectAdapter() {
		if (columnsObjectItemProvider == null) {
			columnsObjectItemProvider = new ColumnsObjectItemProvider(this);
		}

		return columnsObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link openmlperf.openmlperfPerformanceScenario.openmlperfPerformanceScripting.ActivityToActivity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityToActivityItemProvider activityToActivityItemProvider;

	/**
	 * This creates an adapter for a {@link openmlperf.openmlperfPerformanceScenario.openmlperfPerformanceScripting.ActivityToActivity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityToActivityAdapter() {
		if (activityToActivityItemProvider == null) {
			activityToActivityItemProvider = new ActivityToActivityItemProvider(this);
		}

		return activityToActivityItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (initialItemProvider != null) initialItemProvider.dispose();
		if (finalItemProvider != null) finalItemProvider.dispose();
		if (activityItemProvider != null) activityItemProvider.dispose();
		if (thinkTimeItemProvider != null) thinkTimeItemProvider.dispose();
		if (saveParametersItemProvider != null) saveParametersItemProvider.dispose();
		if (dataTableItemProvider != null) dataTableItemProvider.dispose();
		if (parameterObjectItemProvider != null) parameterObjectItemProvider.dispose();
		if (columnsObjectItemProvider != null) columnsObjectItemProvider.dispose();
		if (activityToActivityItemProvider != null) activityToActivityItemProvider.dispose();
	}

}
